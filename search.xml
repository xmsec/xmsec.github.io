<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[macos-collections]]></title>
    <url>%2F%2Fblog%2F2019%2F06%2F03%2Fmacos-collections%2F</url>
    <content type="text"><![CDATA[bashiterm2 ohmyzsh https://www.jianshu.com/p/9c3439cc3bdb https://zhuanlan.zhihu.com/p/68876098 zsh git/z/zsh-autosuggestions command 查看监听端口 sudo lsof -nP -iTCP[:端口号] -sTCP:LISTEN netstat -an -p ‘tcp’ proxy12export &#123;http,https,ftp&#125;_proxy=&apos;http://127.0.0.1:1080&apos;export socks5_proxy=&apos;socks5://localhost:1080&apos; or proxychains4 双网卡 routesudo route add -net 10.10.15.0 -netmask 255.255.255.0 10.10.15.255 ip mask gateway 适用内网与外网网关不同时 brew替换homebrew默认源替换brew.git:12cd &quot;$(brew --repo)&quot;git remote set-url origin https://mirrors.ustc.edu.cn/brew.git 替换homebrew-core.git:12cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git 如果替换源之后brew update 没反应12cd &quot;$(brew --repo)&quot;git pull origin master 切回官方源重置brew.git:12cd &quot;$(brew --repo)&quot;git remote set-url origin https://github.com/Homebrew/brew.git 重置homebrew-core.git:12cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;git remote set-url origin https://github.com/Homebrew/homebrew-core.g 替换Homebrew Bottles源Homebrew Bottles是Homebrew提供的二进制代码包，目前镜像站收录了以下仓库： 对于bash用户12echo &apos;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&apos; &gt;&gt; ~/.bash_profilesource ~/.bash_profile 对于zsh用户12echo &apos;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&apos; &gt;&gt; ~/.zshrcsource ~/.zshrc install commandbrew info pythonbrew install pythonbrew link pythonbrew cleanup systemvolumn 通信自动音量调整关闭123通信前printf &quot;p *(char*)(void(*)())AudioDeviceDuck=0xc3\nq&quot; | lldb -n QQprintf &quot;p *(char*)(void(*)())AudioDeviceDuck=0xc3\nq&quot; | lldb -n WeChat docker mirror RUN sed -i ‘s/archive.ubuntu.com/mirrors.ustc.edu.cn/g’ /etc/apt/sources.list mysql error run into this under ubuntu14.04 with updating password [ERROR] Fatal error: Can’t open and lock privilege tables: Got error 140 from storage engine mkdir /var/run/mysqld ; chown -R mysql:mysql /var/lib/mysql /var/run/mysqld &amp;&amp; service mysql start other error maybe mkdir /var/run/xxx gdb docker run --privileged docker run --cap-add=SYS_PTRACE (or ALL) configure proxy server https://docs.docker.com/network/proxy/ software collectionresource url https://bbs.feng.com/ https://macbed.com Basic &amp; Tools vscode textastic 010 editor https://www.52pojie.cn/thread-847145-1-1.html wireshark charles https://www.zzzmode.com/mytools/charles/ proxyfier antsword ida keypatch https://github.com/fjh658/keystone-engine https://github.com/L4ys/LazyIDA fix 10.14 crash https://github.com/fjh658/IDA7.0_SP burpsuite android jeb https://bbs.pediy.com/thread-230293-1.htm jadx apktool ssh manage termius document dash python brew install python brew install python@2 pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some Note Mweb / yu writer with hexo Onenote notion 滴答清单 效率 Alfred find clipboard workflow https://github.com/liberize/alfred-dict-workflow Reeder (RSS) with sync inoreader https://github.com/zer0yu/CyberSecurityRSS FTP transmit convenient Default Folder（finder 快速切换目录） bandzip 压缩 bingpaper 壁纸 iina 播放器 source tree （git gui） teamviewer (anydesk/microsoft remote desktop) easy new file (新建文件，快速打开终端) FDM 下载器 迅雷 Scroll reverser 鼠标滚轮反转 PDF element PRO termius (ssh management) fine reader ocr magnet (窗口管理) PicGo 图片上传客户端 dozer brew cask install dozer 状态菜单图标隐藏 iStat Menus 添加状态菜单（CPU/MEM/风扇） Visual PD/VMFUSION https://www.vmware.com/go/getfusion wine winetricks docker DB navicat 旧版本可构造公私钥对 datum Develope pycharm idea android studio anaconda Backup timemachine 可分区，希捷移动硬盘 （ NTFS 管理) https://support.apple.com/zh-cn/HT203981 坚果云 onedirve(不知道文件标识符问题修复了没，10.13没问题) dropboxclean ominidisksweeper clean my mac tencent lemonaccess google https://github.com/JadaGates/ShadowsocksBio install https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev.sh libdev https://github.com/shadowsocks/shadowsocks-libev https://github.com/shadowsocks/v2ray-plugin https://github.com/Tsuk1ko/SS-and-SSR-Collection https://github.com/Captain-Alan/VPS-Recommendation office office 2019https://officecdn-microsoft-com.akamaized.net/pr/C1297A47-86C4-4C1F-97FA-950631F94777/MacAutoupdate/Microsoft_Office_16.25.19051201_Installer.pkg 来源https://bbs.feng.com/read-htm-tid-10731033.html]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac debug PHP with xdebug in vscode]]></title>
    <url>%2F%2Fblog%2F2019%2F05%2F01%2Fmac-debug-php-with-xdebug-in-vscode%2F</url>
    <content type="text"><![CDATA[起因发现 10.13 自带的 php7 不能安装 xdebug… 否则需要关闭 SIP，算了不如自己再装一个。 前期准备 brew 自行安装 apache2.4 mac 自带 vscode 自行安装 xcode command-line-tool 自行安装 php7.1 后面说 xdebug 同上 php 7.1brew 在新版中更新了 php 的位置，可以使用 brew search php 查看。 这里安装 php 7.1 版本，安装命令 brew install php@7.1 最后安装完成的信息如下：1234567891011121314151617181920212223To enable PHP in Apache add the following to httpd.conf and restart Apache: LoadModule php7_module /usr/local/opt/php@7.1/lib/httpd/modules/libphp7.so &lt;FilesMatch \.php$&gt; SetHandler application/x-httpd-php &lt;/FilesMatch&gt;Finally, check DirectoryIndex includes index.php DirectoryIndex index.php index.htmlThe php.ini and php-fpm.ini file can be found in: /usr/local/etc/php/7.1/php@7.1 is keg-only, which means it was not symlinked into /usr/local,because this is an alternate version of another formula.If you need to have php@7.1 first in your PATH run: echo &apos;export PATH=&quot;/usr/local/opt/php@7.1/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc echo &apos;export PATH=&quot;/usr/local/opt/php@7.1/sbin:$PATH&quot;&apos; &gt;&gt; ~/.zshrcFor compilers to find php@7.1 you may need to set: export LDFLAGS=&quot;-L/usr/local/opt/php@7.1/lib&quot; export CPPFLAGS=&quot;-I/usr/local/opt/php@7.1/include&quot; 可参考其中配置，在 bash（zsh）中执行12echo &apos;export PATH=&quot;/usr/local/opt/php@7.1/bin:$PATH&quot;&apos; &gt;&gt; ~/.zshrcecho &apos;export PATH=&quot;/usr/local/opt/php@7.1/sbin:$PATH&quot;&apos; &gt;&gt; ~/.zshrc 或者你确实需要替换系统 php，则执行 brew link php@7.1 会提示你下一步操作。 另外，如果需要多版本切换，可参考：https://www.cnblogs.com/it-tsz/p/9311768.html 如果需要替换系统 apache，可参考：http://www.hangge.com/blog/cache/detail_2333.html 如果只是需要调试 php，暂不需要上面两步操作。 xdebug两种方式安装，先介绍简单的： pecl 安装通过 brew 安装的 php 已经添加了这个功能，可通过pecl install xdebug-2.7.1 版本号需要再次确认下，可以参看第二种方法确认。 这种方式安装的 xdebug 自动配置在 php.ini 第一行，最好调整至最后一行，见收尾部分。 编译安装https://xdebug.org/wizard.php 访问上述页面，将 phpinfo() 信息或者 php -i 提交，可以得到编译安装方式。在这里我的信息是： 1234567891011121314151617181920Download xdebug-2.7.1.tgzInstall the pre-requisites for compiling PHP extensions. These packages are often called &apos;php-dev&apos;, or &apos;php-devel&apos;, &apos;automake&apos; and &apos;autoconf&apos;.Unpack the downloaded file with tar -xvzf xdebug-2.7.1.tgzRun: cd xdebug-2.7.1Run: phpize (See the FAQ if you don&apos;t have phpize).As part of its output it should show:Configuring for:...Zend Module Api No: 20160303Zend Extension Api No: 320160303If it does not, you are using the wrong phpize. Please follow this FAQ entry and skip the next step.Run: ./configureRun: makeRun: cp modules/xdebug.so /usr/local/lib/php/pecl/20160303Update /usr/local/etc/php/7.1/php.ini and change the linezend_extension = /usr/local/lib/php/pecl/20160303/xdebug.soMake sure that zend_extension = /usr/local/lib/php/pecl/20160303/xdebug.so is below the line for OPcache. 按照他的顺序来就可以。 收尾在 php.ini 末尾添加如下信息（端口如果冲突可以修改为其他端口）1234567zend_extension=/usr/local/lib/php/pecl/20160303/xdebug.soxdebug.remote_enable=1xdebug.remote_autostart=1xdebug.remote_connect_back=1xdebug.remote_port=9000xdebug.scream=0xdebug.show_local_vars=1 apache - httpd.conf找到 /etc/apache2/httpd.conf 文件，更改 php7 那一行为如下两行：12LoadModule php7_module /usr/local/opt/php@7.1/lib/httpd/modules/libphp7.so#LoadModule php7_module libexec/apache2/libphp7.so vscode 搜索 php debug 进行安装 设置 - setting.json - 添加配置 “php.validate.executablePath”: “/usr/local/opt/php@7.1/bin/php” 打开工程文件夹 切换到调试页面，选 php 并（自动）创建配置项（如果改了端口需要同步修改下端口信息） 调试运行，浏览器访问，即可 扫尾第一个问题启动 node 报错了，因为 php 用到的一个依赖和 node 冲突了，参考如下解决就行了，没仔细研究。https://www.jianshu.com/p/f276676a464ehttps://segmentfault.com/a/1190000018065230?utm_source=tag-newest 第二个问题zsh: /usr/local/bin/pip: bad interpreter: /usr/local/opt/python/bin/python3.7: no such file or directory 随 php 安装的 py3 更新了版本，并且覆盖了软连接brew link --overwrite python@2 可解决 第三个问题123ImportError: dlopen(/usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/readline.so, 2): Library not loaded: /usr/local/opt/readline/lib/libreadline.7.dylib Referenced from: /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/readline.so Reason: image not found 安装 php 更新了 readline 到 8 1234/usr/local/opt/readline/lib/:libhistory.8.0.dylib libhistory.dylib libreadline.alibhistory.8.dylib libreadline.8.0.dylib libreadline.dyliblibhistory.a libreadline.8.dylib pkgconfig 解决：ln -s /usr/local/opt/readline/lib/libreadline.8.0.dylib /usr/local/opt/readline/lib/libreadline.7.dylib]]></content>
      <tags>
        <tag>mac</tag>
        <tag>xdebug</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web中的密码学]]></title>
    <url>%2F%2Fblog%2F2019%2F04%2F30%2Fweb-crypto%2F</url>
    <content type="text"><![CDATA[0x00 Something这篇 web 中的密码学攻击滞留在博客好久了，因为详细写懒得动，简单写又太水，最后还是在这里水一下吧。包含： Hash扩展长度攻击 Padding Oricle Attack Bit-flipping attack TO-DO 0x01 Hash扩展长度攻击在某篇wp中，为了填坑，写了关于此部分的理解。 MD5等hash算法会对输入进行分组并PADDING，来满足固定的长度，于是我们可以在原有的输入后手动增加PADDING字符，来保证原有的分组不被改变，并在原来的基础上添加新的输入。 PADDING: 消息必须进行补位，即使得其长度在对 512 取模后的值为 448。也就是说，len(message) % 512 = 448。当消息长度不满 448 bit 时（注意是位，而不是字符串长度），消息长度达到 448 bit 即可。当然，如果消息长度已经达到 448 bit，也要进行补位。补位是必须的。 补位的方式的二进制表示是在消息的后面加上一个1，后面跟着无限个0，直到 len(message) % 512 = 448。在 16 进制下，我们需要在消息后补80，就是 2 进制的10000000。我们把消息abc进行补位到 448 bit，也就是 56 byte。 补位过后，第 57 个字节储存的是补位之前的消息长度。abc是 3 个字母，也就是 3 个字节，24 bit。换算成 16 进制为 0x18。其后跟着 7 个字节的 0x00，把消息补满 64 字节。 我们以例子说明：比如对’admin’字符串进行md5加密，那么填充就应该是&#39;61646d696e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000000000000&#39;‘61646d696e’是admin的hex编码，80是填充的第一字节，后面的28表示40bit，即5个字节，是小端。 在采用MD5(SALT+SECRET)等类似方式时，由于未知量拼接后在SECRET前面，导致可以在SECRET后添加PADDING字符，在不知道salt的情况下，通过已知的一对VALUE-HASH值，枸造出一对新的VALUE-HASH值（value在原来的基础上在末尾添加额外数据）。 亦可参考：https://seaii-blog.com/index.php/2017/05/12/56.html 0x02 Padding Oricle Attack原理请见： http://blog.zhaojie.me/2010/10/padding-oracle-attack-in-detail.html http://www.icylife.net/yunshu/attachments/Padding-Oracle-Attack.pdf 如果看原理的话，个人感觉最好的便是白帽子讲 web 安全，其次是上面两篇。其他的写的都没有上述的三篇清晰。 遇到的题目：https://www.xmsec.cc/ddctf-2019-writeup/#%E5%86%8D%E6%9D%A5%E4%B8%80%E6%9D%AFjava 其中 token 在 cookie 中，值为 UGFkT3JhY2xlOml2L2NiY8O+7uQmXKFqNVUuI9c7VBe42FqRvernmQhsxyPnvxaF 显然提示了 Padding Oricle，根据原理可写出上文中的脚本，爆出明文 {&quot;id&quot;:100,&quot;roleAdmin&quot;:false}，最后根据 IV / 中间值 / 密文的关系构造新的明文 {&quot;id&quot;:100,&quot;roleAdmin&quot;:true} 即可。 TODOhttps://seaii-blog.com/index.php/2017/05/13/60.html 原来一直在看这篇，但是作者讲的细节也有一些欠缺，但是作为复习来看还是可以的。]]></content>
      <tags>
        <tag>web</tag>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTF运维命令手记]]></title>
    <url>%2F%2Fblog%2F2019%2F04%2F26%2Fctf-command-notes%2F</url>
    <content type="text"><![CDATA[引言一直没有把用到的系统命令系统整理一下，想着博客搁置好久了，好些内容也在之前的随笔写了些，但是混合起来还是干货不足，现在这里划一划（吧。 不定期更新中 Docker 进入容器 bashdocker exec -it container-id /bin/[ba]sh 新建容器docker run -it[d] [--rm] -v hostdir:vdir -p hostp:vp [--name xxx] /file/to/run build imagedocker build ./ 清掉终止的容器docker rm $(docker ps -aq) docker compose up down restart 文件/内容寻找、替换 grep -r &quot;flag&quot; * #当前目录 grep -rln &#39;keyword&#39; /home grep -rlP ^1cff /home 按16进制搜索 find /home -name &#39;*keyword*&#39;按文件名搜索 sed -i &#39;s/astring/bstring/g&#39; path/to/file sed -i &#39;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.163.com/g&#39; /etc/apt/sources.list sed -i &#39;s/astring/bstring/g&#39; [grep -rl](反引号包裹 替换子文件夹 数据库备份数据库 mysqldump [-hhostname] -uusername -ppassword –databases databasename &gt; backupfile.sql mysqldump -u 用户名 -p 密码 数据库名 &gt; bak.sql mysqldump –all-databases &gt; bak.sql还原数据库 mysql -u username -p [pass] databasename &lt; backupfile.sql mysql -u 用户名 -p 密码 数据库名 &lt; bak.sql tar 打包文件tar zcvf /tmp/www.tgz /var/www/html 解压文件tar zxvf /tmp/www.tgz -C /tmp/ cron提供crontab命令来设定cron服务的，以下是这个命令的一些参数与说明: crontab -u //设定某个用户的cron服务 crontab -l //列出某个用户cron服务的详细内容 crontab -r //删除没个用户的cron服务 crontab -e //编辑某个用户的cron服务 网络连接 netstat -antp netstat -ano win netstat -ano|findstr &#39;port num&#39; win 双网卡内外网路由 win 12345route ADD 202.1.0.100 MASK 255.255.255.255 172.16.7.1 if 12route ADD 192.168.74.10 MASK 255.255.255.0 192.168.75.254 if 15route ADD 10.10.0.0 MASK 255.255.0.0 172.16.3.254 if 15route delete 0.0.0.0route add 0.0.0.0 mask 0.0.0.0 192.168.43.1 if 5 注意接口配置 mac12345netstat -rn --查看路由表route get 0.0.0.0 --获取默认路由sudo route delete 0.0.0.0 --删除默认路由sudo route add -net 0.0.0.0 192.168.1.1 --添加公网网关sudo route add -net 166.0.0.0 166.6.66.254 --添加内网网关 此外要在配置中调整默认路由网卡为优先]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客已暂时转移]]></title>
    <url>%2F%2Fblog%2F2016%2F09%2F10%2Fblog-temporary-removed%2F</url>
    <content type="text"><![CDATA[博客已转移至www.xmsec.cc 只进行一点点的更新和随笔。]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[base64中文、与佛论禅编码]]></title>
    <url>%2F%2Fblog%2F2016%2F07%2F19%2Fbase64%E4%B8%AD%E6%96%87%E3%80%81%E4%B8%8E%E4%BD%9B%E8%AE%BA%E7%A6%85%E7%BC%96%E7%A0%81%2F</url>
    <content type="text"><![CDATA[0x00base64在对中文进行编码和解码时容易出现乱码的问题，从而可能失去base64编码这种思路，经过查找，在 http://www.mxcz.net/tools/base64.aspx 中勾选GB2312即可正常解码。 0x01与佛论禅编码。在做杂项题时遇到了一个奇怪的编码方式，经过编码得到佛经的内容，类似于无密码加密后用汉字替换字母。比如下面这个base64vKrrYLDjvuOwosFQyc++48bFv+C237VLyfHKx77jtcPSucrA0q7SucTFxfPWtsTHyd2/4MTFytKw48ndtcO+ucSmyeHapLyqyd3i8sndwv7WtsrH8Ku17snd1dqMkcnd5rbAj8P32qSc57nK1FjE4cFQsKLWts+k2aTSt9aUuvTU0NaU2qTT0Na2yarExepBwM+12Ly08Kv8Ttqktci12LrI2qS8tMXz1k+1ucTFxPnAz7LAhaLZpMCPoHE=经过解码得到吉隸般俱阿罰上俱婆苦哆礙神是俱得夜世耶夜呐朋侄那奢苦呐室般奢得竟摩舍冥吉奢怛奢漫侄是皤殿奢遮寫奢娑缽明冥滅故訶尼罰阿侄悉伽曳謹呼孕謹冥有侄瑟呐闍老地即皤麼冥等地喝冥即朋諳倒呐涅老怖參伽缽爍revese之后与佛论禅解码就可以得到结果。http://www.ptxz.com/fo/ 0x02本文来自某个CTF题目以及WP，给出链接。参考题目]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>MISC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ZIP伪加密]]></title>
    <url>%2F%2Fblog%2F2016%2F06%2F27%2FZIP%E4%BC%AA%E5%8A%A0%E5%AF%86%2F</url>
    <content type="text"><![CDATA[简述最近遇到了一个颇有意思的题目，内容涉及图片隐写和ZIP伪加密。接下来主要分享关于zip伪加密的一些内容。 原理ZIP伪加密是在文件头的加密标志位做修改，进而再打开文件时识别为加密压缩包。在参考了网上多数文章无果后，在西普的一个小题找到了可以复现的方法。给出某个示例： 压缩源文件数据区 50 4B 03 04：这是头文件标记（0x04034b50） 14 00：解压文件所需 pkware 版本 00 00：全局方式位标记（有无加密） 08 00：压缩方式 5A 7E：最后修改文件时间 F7 46：最后修改文件日期 16 B5 80 14：CRC-32校验（1480B516） 19 00 00 00：压缩后尺寸（25） 17 00 00 00：未压缩尺寸（23） 07 00：文件名长度 00 00：扩展记录长度 6B65792E7478740BCECC750E71ABCE48CDC9C95728CECC2DC849AD284DAD0500 压缩源文件目录区 50 4B 01 02：目录中文件文件头标记(0x02014b50) 3F 00：压缩使用的 pkware 版本 14 00：解压文件所需 pkware 版本 00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了） 08 00：压缩方式 5A 7E：最后修改文件时间 F7 46：最后修改文件日期 16 B5 80 14：CRC-32校验（1480B516） 19 00 00 00：压缩后尺寸（25） 17 00 00 00：未压缩尺寸（23） 07 00：文件名长度 24 00：扩展字段长度 00 00：文件注释长度 00 00：磁盘开始号 00 00：内部文件属性 20 00 00 00：外部文件属性 00 00 00 00：局部头部偏移量 6B65792E7478740A00200000000000010018006558F04A1CC5D001BDEBDD3B1CC5D001BDEBDD3B1CC5D001 压缩源文件目录结束标志 50 4B 05 06：目录结束标记 00 00：当前磁盘编号 00 00：目录区开始磁盘编号 01 00：本磁盘上纪录总数 01 00：目录区中纪录总数 59 00 00 00：目录区尺寸大小 3E 00 00 00：目录区对第一张磁盘的偏移量 00 00：ZIP 文件注释长度 可注意到第二个加密标志位，0000改为0900便会出现伪加密。 测试实测例子（仅压缩一个1.txt）如图： 可在第三行最后发现 0008 与开始的 0008 对应。将 0008 改为 0908 再解压时需要输入密码。改为原状则不需要输入密码。 参考题目： 1.实验吧2.RCTF MISC2003.2016京津冀网络安全技能赛 MISC xmsec]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>隐写术</tag>
        <tag>ZIP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CTF图片隐写术总结]]></title>
    <url>%2F%2Fblog%2F2016%2F06%2F23%2FCTF%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E6%9C%AF%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[简述从接触隐写术到现在有一段时间了，也在乌云上见到了经典的分享，详见参考目录。个人感觉隐写术的趣味性很强，故总结一些关于图片隐写术的小姿势。（不断补充） 常见图片 GIF1.GIF文件头 GIF82.steggsolve.jar JPGJPEG 文件头 0xFFD8FF结束 FFD9 PNG PNG 文件头 0x89504E470D0A1A0A1.LSB2.pngcheck（IDAT） 二维码qrcode解码添加数据工具：binwalk，foremost截断数据修改数据 exif右键属性、Power_exif LSB工具：stegesolve.jar 直接出结果 二维码 复杂数据(编程处理) 编程辅助工具：python LSBputhon PIL IDATwinhex,pngcheck 参考： 1.隐写术总结 2.西普实验吧 xmsec]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>隐写术</tag>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo下FireBase访问统计]]></title>
    <url>%2F%2Fblog%2F2016%2F03%2F15%2FHexo%E4%B8%8BFireBase%E8%AE%BF%E9%97%AE%E7%BB%9F%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[过程各路大牛已经写了不少教程，也就不在这里多废话了。可以参考以下文章： 1.http://www.pangjian.info/2015/02/27/realtime-count-firebase/2.http://ibruce.info/2013/12/22/count-views-of-hexo/ 在这里，对可能比较难操作的几点进行说明。 给出七牛的js &lt;script src=&quot;//buru.u.qiniudn.com/firebase-2.0.5.js&quot;&gt;&lt;/script&gt; 在页面footer增加记录条目 1234567891011121314&lt;footer id=&quot;footer&quot;&gt; &lt;% if (theme.sidebar === &apos;bottom&apos;)&#123; %&gt; &lt;%- partial(&apos;_partial/sidebar&apos;) %&gt; &lt;% &#125; %&gt; &lt;div class=&quot;outer&quot;&gt; &lt;div id=&quot;footer-info&quot; class=&quot;inner&quot;&gt; &amp;copy; &lt;%= date(new Date(), &apos;YYYY&apos;) %&gt; &lt;%= config.author || config.title %&gt;&lt;br&gt; Powered by &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt; . &lt;font id=&quot;sum_counter&quot;&gt;&lt;/font&gt; &lt;font id=&quot;detail_counter&quot;&gt;&lt;/font&gt; &lt;/div&gt; &lt;/div&gt;&lt;/footer&gt; 注意添加font id 行 js代码写法 js代码可以写在footer中。 给出一个footer.ejs示例。点击下载 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;div class=&quot;copyright&quot;&gt; &lt;% if (config.author)&#123; %&gt; &amp;copy; &lt;%= new Date().getFullYear() %&gt; &lt;a href=&quot;&lt;%- config.root %&gt;&quot;&gt;&lt;%= config.author %&gt;&lt;/a&gt; &lt;% &#125; else &#123; %&gt; &amp;copy; &lt;%= new Date().getFullYear() %&gt; &lt;a href=&quot;&lt;%- config.root %&gt;&quot;&gt;&lt;%= config.title %&gt;&lt;/a&gt; &lt;% &#125; %&gt;&lt;/div&gt;&lt;div class=&quot;theme-copyright&quot;&gt; &lt;a href=&quot;http://example.net/&quot; target=&quot;_blank&quot;&gt;论坛&lt;/a&gt; | &lt;font id=&quot;sum_counter&quot;&gt;&lt;/font&gt; &lt;font id=&quot;detail_counter&quot;&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;&lt;html&gt;&lt;head&gt; &lt;script src=&apos;https://cdn.firebase.com/js/client/2.2.1/firebase.js&apos;&gt;&lt;/script&gt; &lt;/head&gt;&lt;body&gt; &lt;script&gt;var myDataRef = new Firebase(&apos;https://yourapp.firebaseio.com/&apos;)// 明细由当前页面的url表示，将反斜线替换成下划线，并将中文decode出来var current_url = decodeURI(window.location.pathname.replace(new RegExp(&apos;\\/|\\.&apos;, &apos;g&apos;),&quot;_&quot;));// 获取总数，并将总访问量展示在页面上myDataRef.child(&quot;sum&quot;).on(&quot;value&quot;, function(data) &#123; var current_counter = data.val(); if( $(&quot;#sum_counter&quot;).length &gt; 0 &amp;&amp; current_counter &gt;1 )&#123; $(&quot;#sum_counter&quot;).html( &quot; | 总访问量 &lt;font style=&apos;color:white&apos;&gt;&quot;+ current_counter +&quot;&lt;/font&gt; 次&quot; ); &#125;;&#125;);// 获取明细，并将明细也展示在页面上myDataRef.child(&quot;detail/&quot;+current_url).on(&quot;value&quot;, function(data)&#123; var detail_counter = data.val(); if($(&quot;#detail_counter&quot;).length &gt; 0 &amp;&amp; detail_counter &gt; 1)&#123; $(&quot;#detail_counter&quot;).html( &quot; 本页访问量 &lt;font style=&apos;color:white&apos;&gt;&quot;+ detail_counter +&quot;&lt;/font&gt; 次&quot; ); &#125;&#125;);// 总数+1myDataRef.child(&quot;sum&quot;).transaction(function (current_counter) &#123; return (current_counter || 0) + 1;&#125;);// 明细+1myDataRef.child(&quot;detail/&quot;+current_url).transaction(function (current_counter) &#123; return (current_counter || 0) + 1;&#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; cnzz统计@简书 做法是先注册账号，然后添加网址就设置好了。CNZZ作为例子说明一下。 1.在CNZZ网站注册一个账号，添加网站后，得到各个形式的代码，任选其一； 2.在Hexo\themes\jacman\layout_partial文件夹下新建一个cnzz_tongji.ejs文件，把你的代码粘贴在第一行和最后一行之间（中间是我的，替换成你自己的）；123456&lt;% if (theme.cnzz)&#123; %&gt;&lt;script type=&quot;text/javascript&quot;&gt; var cnzz_protocol = ((&quot;https:&quot; == document.location.protocol) ? &quot; https://&quot; : &quot; http://&quot;); document.write(unescape(&quot;%3Cspan id=&apos;cnzz_stat_icon_1256211004&apos;%3E%3C/span%3E%3Cscript src=&apos;&quot; + cnzz_protocol + &quot;s95.cnzz.com/z_stat.php%3Fid%3D1256211004%26show%3Dpic&apos; type=&apos;text/javascript&apos;%3E%3C/script%3E&quot;));&lt;/script&gt;&lt;% &#125; %&gt; 3.在footer.ejs文件中适当的位置添加你的代码1234&lt;script type=&quot;text/javascript&quot;&gt; var cnzz_protocol = ((&quot;https:&quot; == document.location.protocol) ? &quot; https://&quot; : &quot; [http://&quot;);](http://&quot;);) document.write(unescape(&quot;%3Cspan id=&apos;cnzz_stat_icon_1256211004&apos;%3E%3C/span%3E%3Cscript src=&apos;&quot; + cnzz_protocol + &quot;s95.cnzz.com/z_stat.php%3Fid%3D1256211004%26show%3Dpic&apos; type=&apos;text/javascript&apos;%3E%3C/script%3E&quot;));&lt;/script&gt; 4.在主题配置文件中加入下面代码启用CNZZ统计，注意不要添加站点id，填了的话就不显示图标了。 ## Analytics cnzz_tongji: true xmsec]]></content>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在github上搭建Hexo Blog]]></title>
    <url>%2F%2Fblog%2F2016%2F03%2F06%2FHexo-Blog%2F</url>
    <content type="text"><![CDATA[搭建过程主要过程请参考官方文档：https://hexo.io/zh-cn/docs/index.html 基于本博客Octopress搭建过程给出迁移方法。 把 Octopress source/_posts 文件夹内的所有文件转移到 Hexo 的 source/_posts 文件夹，并修改 _config.yml 中的 new_post_name 参数。 new_post_name: :year-:month-:day-:title.md 注：octopress博文目录是在blog目录下，而hexo是在根目录下。如需调整为一致地址，_config.yml中更改permalink，在地址头部加入/blog/ sitemap站点地图 1、安装插件： npm install hexo-generator-sitemap –save npm install hexo-generator-baidu-sitemap –save2、在博客目录的_config.yml中添加如下代码： 1. # 自动生成sitemap 2. sitemap: 3. path: sitemap.xml 4. baidusitemap: 5. path: baidusitemap.xml 3、hexo编译的时候会自动在根目录生成站点地图 中文乱码 在文件中写中文内容，发布出来后为乱码，原因是编码不对，将文件另存为“UTF-8”编码的文件即可解决问题。 xmsec]]></content>
      <tags>
        <tag>Blog</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Instructions of Physics Bird]]></title>
    <url>%2F%2Fblog%2F2016%2F02%2F05%2FInstructions-of-Physics-Bird%2F</url>
    <content type="text"><![CDATA[Instructions ver 2.0功能说明： 均值计算： 使用时输入数据个数，之后输入第一个数据，点击next，然后输入第二个数据，点击next……输入结束后，点击计算即可显示结果。计算结果在剔除坏值和不确定度中可直接使用 剔除坏值：均值计算结束后，点击GO，即可进行剔除坏值。剔除坏值后原数据会改变，不确定度计算以剔除后的数据为准不确定度：第一步计算均值后，输入仪器不确定度Δm（无则填0）后点击OK。即可自动计算。不确定度计算默认使用第一步的计算结果，仅限于单个测量值的不确定度计算，不适用于间接不确定度计算线性回归：每输入一组x，y的值点击next，以此类推，最后点击计算。关于界面：点击使用说明访问本界面。点击反馈交流访问博客。 xmsec]]></content>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[物理实燕APP 2.6]]></title>
    <url>%2F%2Fblog%2F2016%2F02%2F04%2FPhysics-Bird%2F</url>
    <content type="text"><![CDATA[PhysicsBird（物理实燕）APP为物理实验而生。于安卓、IOS平台开发。作者为在校生，应用仍有不完备之处。有任何建议或意见请在留言区交流~或微信：stranged Brief Introduction 本应用是用以简化物理实验数据处理过程的应用，功能限于物理实验所需的数据处理，提供均值计算，坏值剔除，直接不确定度计算，线性回归计算功能。（虽然简化了计算，但也要记得公式怎么用哦~） 目前已经完成2.5版本，在多个安卓应用市场上架。 用户可在 360，91，应用宝，豌豆荚，魅族，乐商店，百度应用市场搜索“物理实燕”下载本APP。 IOS版本无上传App Store计划，已在github开源，需要在xcode下真机调试安装。（使用xcode7.3.1，swift开发） 安卓与苹果使用说明类似，以安卓端作为介绍的版本 最近更新内容 2016.08 IOS端开发完成、支持安卓6.0、部分优化、版本开源 2016.12 支持安卓7.0、bug修复 Instructions —— How to use均值计算：使用时输入数据个数，之后输入第一个数据，点击next，然后输入第二个数据，点击next……输入结束后，点击计算即可显示结果。计算结果在剔除坏值和不确定度中可直接使用剔除坏值：均值计算结束后，点击GO，即可进行剔除坏值。剔除坏值后原数据会改变，不确定度计算以剔除后的数据为准不确定度：第一步计算均值后，输入仪器不确定度Δm（无则填0）后点击OK。即可自动计算。不确定度计算默认使用第一步的计算结果，仅限于单个测量值的不确定度计算，不适用于间接不确定度计算线性回归：每输入一组x，y的值点击next，以此类推，最后点击计算。关于界面：点击使用说明访问博客。 部分下载链接（微信请在浏览器打开） 360：http://zhushou.360.cn/detail/index/soft_id/3094340豌豆荚：http://www.wandoujia.com/apps/com.stranger.physicsbird百度：http://shouji.baidu.com/software/10659314.htmlIOS github：https://github.com/xmsec/PhysicsBird-IOS 反馈交流请留言~ 谢谢 xmsec]]></content>
      <tags>
        <tag>Android</tag>
        <tag>Material Design</tag>
        <tag>IOS</tag>
        <tag>swift</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Material Design libs ‘colection’]]></title>
    <url>%2F%2Fblog%2F2016%2F01%2F28%2FMaterial-Design%2F</url>
    <content type="text"><![CDATA[Material Design Libs in github and wiki介绍：Google I/O 2014 发布 Material Design，1sters 于 2014-09-09 上线中文版，并稳稳占据百度和 Google material design 关键字的第一名。历时一年，官方已经新增 20+ 章节，我们再次发力，于「2015-08-16」翻译校对完毕所有新增章节，重新发布。 内容来源官方英文文档：http://www.google.com/design/spec/material-design/中文版网站：http://wiki.jikexueyuan.com/project/material-design/中文版 GitHub 仓库：https://github.com/1sters/material_design_zh_2 LibsMaterialDesignLibraryrey5137/materialMaterialEditTextMaterialTabsMaterialViewPager Add. 以Github上最热门的MaterialDesign库，MaterialDesignLibrary来介绍怎样使用Android Sudio导入开源项目的，如果你刚刚从Eclipse转到AS，那下面的文章非常适合。http://www.mamicode.com/info-detail-1044624.html xmsec]]></content>
      <tags>
        <tag>Android</tag>
        <tag>Material Design</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ZIP crack]]></title>
    <url>%2F%2Fblog%2F2015%2F10%2F10%2FZIP-pkcrack%2F</url>
    <content type="text"><![CDATA[ZIP密码破解——明文攻击—— evalsafe group介绍： 随机计算机性能的提高，很多人可能觉得找到一个zip文件的密码是一件很简单的事情。通常，破解zip文件有三种方法：暴力破解、字典攻击，以及明文攻击。 在介绍这三种方法之前，我先给大家介绍几个工具： AZPR : http://www.elcomsoft.com UZPC : http://www.chat.ru/~m53group PKCrack : http://www.unix-ag.uni-kl.de/~conrad/krypto/pkcrack.html 具体怎么使用，可以参照他们的文档，很详细。当然，你也可以通过搜索引擎选择其他的工具。 第一步 了解目标文件 俗话说，知己知彼，百战不殆。 在进行破解之前，全面了解加密的文件可以帮助我们获得很多有用的信息。比如，用WinRAR（windows）或者‘unzip -l’（linux）命令来?获取压缩包的目录结构，和它所包含的文件信息。你时刻要提醒自己注意&gt;的是，有没有可能知道某个加密文件的部分信息。比如说，一个简单的文本文件（readme.txt），或者通用的dll文件（VBXXX.dll、MFCXX.dll），或者是一个通用的.exe文件（SETUP.EXC）。尽可能的去发现任何你可能发现的东西，这一点非常重要。如果你得不到加密文件里的任何片段，那么很遗憾，你将无法使用明文攻击这一最有效的破解利器。 破解的三种方法： 暴力破解。这是最花时间的一种破解方式，除此之外你还能期待些什么？正如它的名字所表达的，暴力破解就是不断的去尝试所有可能的密码。如果密码比较短，或许在短时间内可以找到正确的密码。但是如果比较长，比如说用64个字符长的字符串来做密码的话，可能你重生十次后发现依然未能找到答案。 字典攻击。相比于暴力破解这种弱智儿童，字典攻击大概就是三岁小孩的智商。它使用了一个字典文件，然后一一尝试文件中的每个密码。现在在网络上有很多的人相互共享自己的字典文件，这使得字典攻击比暴力破解有效率得多。尤其是当目标文件是用一个弱密码进行保护的时候，字典攻击效率较高。但是，由于字典攻击没有囊括所有可能的密码，所以对于强密码保护的zip文件，字典攻击毫无办法。 最有意思的一种方法： 明文攻击。这是到目前为止最智能的一种攻击方法，但只有PKCrack可以做到。眼见为实，你可以亲自尝试一下。但是首先，你需要一些前提条件：一个加密的压缩文件了解压缩文件的zip版本（比如加密平台、zip版本号等，可以通过文件属性了解。如果是linux平台，用unzip -v命令可以查看一个zip包的详细信息，包括加密算法等。 知道压缩包里某个文件的部分连续内容（至少12字节） 第二步 破解 如果你已经知道加密文件的部分内容，比如在某个网站上发现了它的readme.txt文件，你就可以开始尝试破解了。首先，将这个明文文件打包成zip包，比如将readme.txt打包成readme.zip。打包完成后，需要确认二者采用的压缩算法相同。一个简单的判断方法是用winRAR打开文件，同一个文件压缩后的体积是否相同。如果相同，基本可以说明你用的压缩算法是正确的。如果不同，就尝试另一种压缩算法。 现在，你有了两个文件： 加密了的目标文件crypt.zip(1.zip) 你获取到的明文（readme.txt）生成的zip包plain.zip(readme.zip) 假设两个文件的结构如下：Crypt.zip -- file1.txt -- readme.txt Plain.zip |– readme.txt 然后，通过控制台调用pkcrack：pkcrack –c readme.txt –p readme.txt –C 1.zip –P readme.zip -d de.zip 几个参数的意义如下： -C : 要破解的目标文件（含路径） -c ：破解文件中的明文文件的名字（其路径不包括系统路径，从zip文件一层开始） -P ：压缩后的明文文件 -p : 压缩的明文文件中明文文件的名字（也就是readme.txt在plain.zip中的位置） 如下是一个解密过程的截图： 这里有一个要注意的地方：pkcrack在vista和win7下面无法正常运行，所以请保证操作系统是xp或者linux。 pkcrack还有一个重要的选项是-d，后面跟一个文件名，比如decrypt.zip，表示解密后的zip文件输出。虽然在这个例子中，我没有用到这个选项，但是强烈推荐使用这一选项。如果不用这一选项，解密的时间非常长，而使用这一选项的话，一般只要几分钟。至于为什么不用会变慢，大家可以参照它的readme文档，大概是跟一个叫做findkey的程序有关，这里就不多解释了。 如何简单的避免密码破解呢？对于明文攻击，最简单有效的方法是进行两次zip加密，这样明文文件的信息就不会暴露在破解者的眼皮底下。对于字典攻击，避免使用弱密码，采用数字加字符的方式生成密码。对于暴力破解，采用7个字符以上的密码就可以让破解者见鬼去了。 资料引用自CSDN 样例测试： 样例下载 XDCTF 2015 MISC 200 链接: http://pan.baidu.com/s/1hqLcqbi 密码: 2nmd 简要测试步骤： binwalk扫描 foremost提取 观察CRC32(百科链接) 提取文件组装 pkcrack破解测试图见上文。 xmsec]]></content>
      <tags>
        <tag>misc</tag>
        <tag>crypto</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Use Octopress]]></title>
    <url>%2F%2Fblog%2F2015%2F10%2F02%2FUse-Ocopress%2F</url>
    <content type="text"><![CDATA[GIT上个人静态博客安装—— evalsafe groupoctopress在GIT上的安装，根据视频演示，整理文字内容如下。 更新后注明： 1. 需要搭建平台环境，并且修改部分http地址 （2015.11.22更新Ruby镜像地址，因http镜像关闭；增加部分流程） 环境搭建：Git、Ruby、DevKit、MarkdownPad 2. ruby 环境问题，可能会遇到问题，提供其他方案 Git：版本管理工具，将代码托管到 GitHub Ruby + DevKit：生成静态网页 MarkdownPad：Windows 下 Markdown 语法编辑器 1.Git config –global user.name “” 2.Git config –global user.email “” 3.C：user目录下.ssh 使用bash ssh-keygen –t rsa –C “email” 回车 4.密码可以不用输入。文件生成为pub公钥内容提交到git的settings，ssh keys Add 新的，加入key 5.bash ssh –T git@github.com @again 6.Ruby:Path Add to Path! &amp; bash ruby dk.rb init 生成 yml文件 7.Yml文件存有 ruby path 8.Bash buby dk.rb install 9.Octopress 克隆 克隆 Octopress 至本地 git clone git://github.com/imathis/octopress.git octopress 安装依赖项 gem sources –a https://ruby.taobao.org gem sources –r http://rubygems.org gem sources –r https://rubygems.org vi Gemfile VIM press i gem install bundler bundle install 安装依赖项时需要注意 安装并使用默认主题 rake install 1.bash rake generate rake preview 2.文件夹Sources include head.html google libs.baidu.com/jquery 新建博客 rake new_post[“title”] 新建单页面 rake new_page[jikexueyuan] // creates /source/jikexueyuan/index.markdown rake new_page[jikexueyuan/page.html] // creates /source/jikexueyuan/page.html 1.工具 MarkdownPad、记事本、Vim、Emacs……引用 - 列表、 * 加粗、 []() 超链接、 !{}() 图片、 ｛% video http 640 320 %} 视频、 ··· code ··· 新建仓库 username.github.io 与本地 Octopress 目录绑定 rake setup_github_pages 输入第一种URL rake deploy（rake deploy可能会遇到错误，可使用git windows 同步） 将 source 目录更新到远程仓库 git add . git commit -m ‘your message’ git push origin source 博客的自定义配置 主配置文件 在 _config.yml 文件中，设置 url、title、author 等基本信息 主题安装 1.到 GitHub 上找主题文件 2.安装主题 rake install[‘themename’] 3.重新生成 rake generate安装主题会清除原有的配置 增加评论功能 使用多说插件 http://duoshuo.com/ 注：1.bash表示bash提示符下2.请结合google使用，本文只提供参考 xmsec]]></content>
      <tags>
        <tag>Blog</tag>
        <tag>Octopress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Welcome to xmsec]]></title>
    <url>%2F%2Fblog%2F2015%2F09%2F16%2Fwelcome-to-xmsec%2F</url>
    <content type="text"><![CDATA[About Information SecurityPlace to share. xmsec]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
